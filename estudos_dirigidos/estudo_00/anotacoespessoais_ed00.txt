---------- file: Exemplo0000.c

int main ( int argc, char*argv[] )
	- sempre começamos um programa em C com a função main
	- os parâmetros da função main não podem ser definidos pelo programador, os únicos parâmetros aceitáveis são o argc e o argv
	- eles fazem com que seja possível inserir valores escritos na frente da "chamada de execução" do programa no prompt
	- saiba mais sobre aqui: http://mtm.ufsc.br/~azeredo/cursoC/aulas/c790.html
	
??? DÚVIDA 

	printf ( "%s\n", "Exemplo0000 - Programa = v0.0" );
	printf ( "\n\nApertar ENTER para terminar." );
	
	o que é esse %s? pq tem em um e não em outro?
	
---------- file: Exemplo0001.c

??? onde diabos fica uma biblioteca? de ONDE o programa puxa a biblioteca?

---------- file: Exemplo0002.c

scanf ("%d", &opcao);
	o e comercial significa que estou mandando o valor da inteira digitado para dentro da variável opção. estou endereçando o valor para a opção.
	
---------- file: Exemplo0003.c
	
printf ("\n%s\n", "Opcoes:");
printf ("\nOpcoes:\n");
	MESMA coisa!
	
>>>>> IF ELSE >>>>> melhor para lidar com intervalor

#include <stdio.h>
int main() {
	
	int num;
	
	printf ("Digite um número: ");
	scanf ("%d", &num);
	printf("%d", num);
	
	if (num > 10) {
        printf ("\n\nEsse número é maior que 10");
	}
	else if (num == 10) {
        printf ("\n\nEsse número é igual a 10.");
    }
    else {
        printf ("\n\nEsse número é menor que 10");
    }
    
	return(0);
}
	
	
>>>>> SWITCH CASE >>>>> melhor para lidar com casos singulares
	
	switch (coisaquevaivariar)
	{
	case valor1queacoisaquevaivariarpodeassumir:
		embaixo aki escrevo o que vou fazer caso esse valor seja inputado
		
	case valor2queacoisaquevaivariarpodeassumir:
		embaixo aki escrevo o que vou fazer caso esse valor seja inputado
		
	default: //é como se fosse o else
		embaixo aki o que acontece caso nenhum dos cases listados ocorra
	}
	
---------- file: Exemplo0003.c

	Void as a Return Type: When you see void in the context of a function declaration or definition, it means that the function does not return any value. 
	
	Void Function Parameters: In a function declaration or definition, using void as a parameter list indicates that the function does not accept any parameters.
	
void myFunction(void) 
{
    // Some code here
}

	This explicitly states that myFunction doesn't take any parameters. However, in C, if you omit the parameter list altogether, like void myFunction(), it's considered the same as specifying void. But using void explicitly makes it clearer and more explicit.

	>>>> In summary, void in C is used to denote the absence of a specific type, whether it's for function return types, function parameters, or for creating pointers that can point to any type of data.
	
    >>>> void method_01 (void) 
	quais as vantagens e desvantagens de se usar o void como tipo da variável e parâmetro? se essas duas coisas podem ser indefinidas de vez em quando, pq não podemos simplesmente nunca definir e deixar em aberto? 

---------- file: Exercicio000.c
---------- Exemplo209

string compare -> retorna 0 se as strings forem iguais e um valor diferente de zero se as strings forem diferentes.

operador ternario -> forma muuuuito resumida de escrever if else.

strcmp(S, SENHA)==0: This condition checks if the result of strcmp(S, SENHA) is equal to 0, meaning that the strings are equal.

?1:0: This is a ternary conditional operator. If the condition before the ? is true (i.e., strcmp(S, SENHA) returns 0), then 1 is returned; otherwise, 0 is returned.

So, putting it all together, the printf statement will print "PASSWORD COMPARISON = " followed by 1 if the strings S and SENHA are equal, and 0 if they are not equal. This is a common way to represent a boolean result in C, where 1 typically represents true and 0 represents false.

---------- file: Exercicio001.c
---------- Exemplo404

for(CONTADOR=1; CONTADOR<=3; CONTADOR=CONTADOR+1)
{
    // Loop body
}

Initialization: CONTADOR=1; - Before the loop begins, it initializes the loop control variable CONTADOR to 1. This step is executed only once before the loop starts.

Condition: CONTADOR<=3; - This is the loop condition. It checks whether the loop control variable CONTADOR is less than or equal to 3. If this condition is true, the loop body is executed. If it's false, the loop terminates, and the program continues with the code after the loop.

Body Execution: Inside the loop, the following actions are performed:

printf("%d. FORNECER UM VALOR INTEIRO: ", CONTADOR); - This line prints a message to the console asking the user to input an integer value, along with the iteration number (CONTADOR).
scanf("%d", &R); - This line reads an integer value input by the user using scanf() and stores it in the variable R.
getchar(); - This line reads and discards any extra characters (e.g., newline characters) from the input buffer using getchar().
printf("\nO VALOR DIGITADO FOI: %d\n", R); - This line prints the integer value entered by the user.
Iteration: After the loop body executes, the loop control variable CONTADOR is updated. CONTADOR=CONTADOR+1 increments the value of CONTADOR by 1 in each iteration of the loop.

Back to Condition: After the loop body executes, the condition is checked again. If CONTADOR is still less than or equal to 3, the loop body will execute again. Otherwise, the loop terminates, and the program continues with the code after the loop.

This for loop essentially repeats the process of asking the user to input an integer value three times (from 1 to 3) and prints each value entered by the user.

>>>>>>>>> In C, both while and for are loop constructs used to execute a block of code repeatedly based on a condition. The primary difference between them lies in their syntax and the situations in which they are typically used.

While Loop:

The while loop is a pre-tested loop, meaning the loop condition is checked before the loop body is executed.
It has a simple syntax: while (condition) { /* loop body */ }.
The loop continues executing as long as the condition evaluates to true.
It is typically used when you don't know in advance how many times the loop should iterate, or when you want to repeat a block of code until a specific condition is met.
Example:

int i = 0;
while (i < 5) {
    printf("%d\n", i);
    i++;
}

For Loop:

The for loop is also a pre-tested loop, like the while loop.
It has a more compact syntax and is often used when you know in advance the number of iterations or when you need to initialize loop variables.
The syntax of the for loop is for (initialization; condition; update) { /* loop body */ }.
The initialization step is executed once at the beginning of the loop, the condition is checked before each iteration, and the update step is executed after each iteration.
It is commonly used when you need to iterate over a range of values or when you need more control over loop variables.
Example:

for (int i = 0; i < 5; i++) {
    printf("%d\n", i);
}

In summary, both while and for loops are used for repetitive execution of code, but they differ in syntax and usage scenarios. The choice between them depends on the specific requirements of the problem you are solving and your coding style preferences.







